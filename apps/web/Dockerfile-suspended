#Â This is work in progress, need to figure out the configuration 


# # Use Node.js LTS
# FROM node:22-alpine AS base

# RUN corepack enable && corepack prepare pnpm@latest --activate
# # Setup pnpm (assuming you're using pnpm, adjust if using npm or yarn)
# FROM base AS builder
# RUN apk update
# RUN apk add --no-cache libc6-compat
# # Set working directory
# WORKDIR /app
# # RUN yarn global add turbo
# COPY . .
# RUN pnpm dlx turbo prune --scope=web --docker

# # Add lockfile and package.json's of isolated subworkspace
# FROM base AS installer
# RUN apk update
# RUN apk add --no-cache libc6-compat
# WORKDIR /app



# # First install the dependencies (as they change less often)
# COPY --from=builder /app/out/json/ .
# RUN pnpm install

# # Build the project
# COPY --from=builder /app/out/full/ .


# # Uncomment and use build args to enable remote caching
# # ARG TURBO_TEAM
# # ENV TURBO_TEAM=$TURBO_TEAM

# # ARG TURBO_TOKEN
# # ENV TURBO_TOKEN=$TURBO_TOKEN

# RUN pnpm build

# FROM base AS runner
# WORKDIR /app

# # Don't run production as root
# RUN addgroup --system --gid 1001 nodejs
# RUN adduser --system --uid 1001 nextjs
# USER nextjs

# # Automatically leverage output traces to reduce image size
# # https://nextjs.org/docs/advanced-features/output-file-tracing
# COPY --from=installer --chown=nextjs:nodejs /app/apps/web/.next/standalone ./
# COPY --from=installer --chown=nextjs:nodejs /app/apps/web/.next/static ./apps/web/.next/static
# COPY --from=installer --chown=nextjs:nodejs /app/apps/web/public ./apps/web/public

# CMD node apps/web/server.js